<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.spring.demo.mapper.LoginMapper" >
  <resultMap id="BaseResultMap" type="com.example.spring.demo.entity.Login" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    ID, username, password, email, money
  </sql>
 <!--用户登录 -->
	<select id="login" parameterType="java.util.Map" resultType="com.example.spring.demo.entity.Login">
		SELECT
		*
		FROM
		login
		WHERE
		username=#{username,jdbcType=VARCHAR}
		AND
		password=#{password,jdbcType=VARCHAR}
	</select>
  
  <!--  查询列表 -->
  	<select id="list" resultType="com.example.spring.demo.entity.Login">
		select * from login 
	</select>
	
	<select id="selectusername" resultType="java.lang.Integer" parameterType="java.lang.String">
		select count(1) from login where username=#{username}
	</select>
		<!-- 查询用户记录总数 -->
	<select id="selectCount" resultType="int">
		select count(*) from login
	</select>
	
 	<!-- 根据分页数据start 和size查询数据 -->
	<select id="findByPage" parameterType="Map" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from login
		<if test="start!=null and size!=null">
			limit #{start},#{size}
		</if>
	</select>
		<!-- 查询用户记录总数 -->
	<select id="selectCounts" resultType="int">
			select count(*) from login WHERE username like  CONCAT('%',#{name},'%')
	</select>
	
 	<!-- 根据分页数据start 和size查询数据 -->
	<select id="findByPages" parameterType="Map" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from login WHERE username like  CONCAT('%',#{name},'%')
		<if test="start!=null and size!=null">
			limit #{start},#{size}
		</if>
	</select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from login
    where ID = #{id,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from login
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.spring.demo.entity.Login" >
    insert into login (ID, username, password,email,money)values(#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR},#{password,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR}, #{money,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.example.spring.demo.entity.Login" >
    insert into login
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.spring.demo.entity.Login" >
    update login
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
       <if test="money != null" >
        money = #{ money ,jdbcType=DECIMAL},
      </if>
      
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.spring.demo.entity.Login" >
    update login
    set username = #{username,jdbcType=VARCHAR},
    
      password = #{password,jdbcType=VARCHAR},  
      
      email = #{email,jdbcType=VARCHAR},
      
      money = #{money,jdbcType=DECIMAL}
      
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>